//
// Generated by JTB 1.3.2
//

options {
   JDK_VERSION = "1.5";
   STATIC = false;
}

PARSER_BEGIN(St4tic)
package st4tic;

import st4tic.syntaxtree.*;
import st4tic.visitor.*;
import st4tic.interpreter.*;
import java.util.Vector;


public class St4tic 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(St4tic)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | <"\"" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN :
{
   <REQUERE: "require">
   | <IF: "if">
   | <WHILE: "while">
   | <DO: "do">
   | <STOP: "stop">
   | <DEF: "def">
}

TOKEN :
{
   <DOT: ".">
   | <COLON: ":">
   | <EQ: "==">
   | <GT: ">">
   | <LT: "<">
   | <GE: ">=">
   | <LE: "<=">
   | <NE: "!=">
   | <PLUS: "+">
   | <MINUS: "-">
   | <MUL: "*">
   | <DIV: "/">
   | <MOD: "%">
   | <ASSIGN: "=">
}

TOKEN :
{
   <INTEGER_LITERAL:  <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
}

TOKEN :
{
   <IDENTIFIER:  <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["_", "a"-"z", "A"-"Z"]>
   | <#DIGIT: ["0"-"9"]>
}

Start Start() :
{
   NodeList n0 = new NodeList();
   NodeSequence n1;
   Require n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   StatementExpression n6;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Require()
      { n1.addNode(n2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   (
      n6=StatementExpression()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   
   { return new Start(n0,n5); }
}

Require Require() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeToken n3;
   Token n4;

   
}
{
   n1="require" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new Require(n0,n2); }
}

MathExpression MathExpression() :
{
   AdditiveExpression n0;

   
}
{
   n0=AdditiveExpression()
   
   { return new MathExpression(n0); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;

   
}
{
   n0=MultiplicativeExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=MultiplicativeExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;

   
}
{
   n0=UnaryExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="/" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9="%" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=UnaryExpression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   MathExpression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   VariableName n9;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=MathExpression()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n8=<INTEGER_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 1); }
   |
      n9=VariableName()
      { n0 = new NodeChoice(n9, 2); }
   )
   
   { return new UnaryExpression(n0); }
}

RelationalExprssion RelationalExprssion() :
{
   RelationalEqualityExpression n0;

   
}
{
   n0=RelationalEqualityExpression()
   
   { return new RelationalExprssion(n0); }
}

RelationalEqualityExpression RelationalEqualityExpression() :
{
   RelationalGreaterExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   RelationalGreaterExpression n8;

   
}
{
   n0=RelationalGreaterExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="==" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="!=" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=RelationalGreaterExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new RelationalEqualityExpression(n0,n1); }
}

RelationalGreaterExpression RelationalGreaterExpression() :
{
   RelationalLessExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   RelationalLessExpression n8;

   
}
{
   n0=RelationalLessExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5=">" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=">=" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=RelationalLessExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new RelationalGreaterExpression(n0,n1); }
}

RelationalLessExpression RelationalLessExpression() :
{
   UnaryRelational n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   UnaryRelational n8;

   
}
{
   n0=UnaryRelational()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="<" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="<=" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=UnaryRelational()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new RelationalLessExpression(n0,n1); }
}

UnaryRelational UnaryRelational() :
{
   MathExpression n0;

   
}
{
   n0=MathExpression()
   
   { return new UnaryRelational(n0); }
}

IfExpression IfExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExprssion n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   StatementExpression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExprssion()
   n4="do" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=StatementExpression()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8="stop" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new IfExpression(n0,n2,n3,n5,n7); }
}

WhileExpression WhileExpression() :
{
   NodeToken n0;
   Token n1;
   RelationalExprssion n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   StatementExpression n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=RelationalExprssion()
   n4="do" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=StatementExpression()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8="stop" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new WhileExpression(n0,n2,n3,n5,n7); }
}

VariableDeclaration VariableDeclaration() :
{
   NodeToken n0;
   Token n1;
   VariableName n2;
   NodeToken n3;
   Token n4;
   MathExpression n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="def" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=VariableName()
   n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MathExpression()
   n7="." { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new VariableDeclaration(n0,n2,n3,n5,n6); }
}

VariableAssign VariableAssign() :
{
   VariableName n0;
   NodeToken n1;
   Token n2;
   MathExpression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=VariableName()
   n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=MathExpression()
   n5="." { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new VariableAssign(n0,n1,n3,n4); }
}

VariableName VariableName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VariableName(n0); }
}

JavaStaticMethods JavaStaticMethods() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   MathExpression n10;
   NodeListOptional n11 = new NodeListOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   MathExpression n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=MathExpression()
   (
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=MathExpression()
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )*
   { n11.nodes.trimToSize(); }
   n17=")" { n16 = JTBToolkit.makeNodeToken(n17); }
   n19="." { n18 = JTBToolkit.makeNodeToken(n19); }
   
   { return new JavaStaticMethods(n0,n2,n8,n10,n11,n16,n18); }
}

StatementExpression StatementExpression() :
{
   NodeChoice n0;
   VariableDeclaration n1;
   VariableAssign n2;
   JavaStaticMethods n3;
   IfExpression n4;
   WhileExpression n5;

   
}
{
   (
      n1=VariableDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=VariableAssign()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=JavaStaticMethods()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=IfExpression()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=WhileExpression()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new StatementExpression(n0); }
}
